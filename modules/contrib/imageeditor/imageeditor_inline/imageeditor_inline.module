<?php

/**
 * @file
 * Allows online editing of inline images using different image editing services.
 */

/**
 * Implements hook_permission().
 */
function imageeditor_inline_permission() {
  return array(
    'use imageeditor_inline' => array(
      'title' => t('Use Image Editor Inline'),
      'description' => t('Allows to use different image editors to create/edit inline images.')),
    'edit all images' => array(
      'title' => t('Edit any image on the page'),
      'description' => t('@access_check_feature: Allows to edit any image on the page including images from external sites.', array('@access_check_feature' => t('Access check feature')))),
    'edit own images' => array(
      'title' => t('Edit only own images'),
      'description' => t('@access_check_feature: Allows to edit only images from this site that are managed files, user should be the owner of the image file.', array('@access_check_feature' => t('Access check feature')))),
    'administer imageeditor_inline' => array(
      'title' => t('Administer Image Editor Inline'),
      'description' => t('Configure Image Editor Inline settings.')),
  );
}

/**
 * Implements hook_menu().
 */
function imageeditor_inline_menu() {
  $items = array();
  $items['admin/config/media/imageeditor/imageeditor_inline'] = array(
    'title'            => 'Image editor inline',
    'description'      => 'Configure Image Editor Inline settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('imageeditor_inline_settings_form'),
    'access callback'  => 'imageeditor_inline_settings_access', //'user_access',
    //'access arguments' => array('administer site configuration'),
    'type'             => MENU_LOCAL_TASK,
  );
  $items['imageeditor_inline/ajax/save'] = array(
    'title' => 'Image Editor Inline Save',
    'description' => 'Saving images from Image Editor Inline',
    'page callback' => 'imageeditor_inline_save',
    'access callback'  => 'user_access',
    'access arguments' => array('use imageeditor_inline'),
    'type' => MENU_CALLBACK,
  );
  $items['imageeditor_inline/ajax/access_check'] = array(
    'title' => 'Image Editor Inline Access Check',
    'description' => 'Checking access to edit images',
    'page callback' => 'imageeditor_inline_access_check',
    'access callback'  => 'user_access',
    'access arguments' => array('use imageeditor_inline'),
    'type' => MENU_CALLBACK,
  );
  $items['imageeditor_inline/revert'] = array(
    'title' => 'Image Editor Inline Revert',
    'description' => 'Revert image to the previous version',
    'page callback' => 'imageeditor_inline_revert',
    //'page callback' => 'drupal_get_form',
    //'page arguments' => array('imageeditor_inline_revert'),
    'access callback'  => 'user_access',
    'access arguments' => array('use imageeditor_inline'),
    'theme callback' => 'imageeditor_inline_revert_theme',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Callback function for settings page access
 */
function imageeditor_inline_settings_access() {
  global $user;
  if (user_access('administer site configuration') || user_access('administer imageeditor_inline')) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function imageeditor_inline_save() {
  $alert = '';
  if (!_imageeditor_inline_access_check($_POST['fullurl'])) {
    $alert .= 'You don\'t have permission to edit this image.' . "\n";
    drupal_json_output($alert);
  }
  else {
  
  $ds = file_default_scheme();
  
//Save backup to default stream wrapper imageeditor/backup
  $directory = $ds. '://imageeditor/backup';
  
  if ($fullurl = imageeditor_inline_urltouri($_POST['fullurl'])) { //original image was from this site
    $local = TRUE;
    $alert .= 'Original image was from this website.' . "\n";
    $directory .= '/' . dirname(file_uri_target($fullurl));
    if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
      watchdog('imageeditor_inline', 'Directory %directory for image backups could not be created.', array('%directory' => $directory), WATCHDOG_WARNING);
    }
    elseif ($backup = file_unmanaged_copy($fullurl, $directory)) {
      watchdog('imageeditor_inline', 'Backed up original image %fullurl to %backup.', array('%fullurl' => $fullurl, '%backup' => $backup), WATCHDOG_INFO);
      $alert .= 'Original image was backed up.' . "\n";
    }
    else {
      watchdog('imageeditor_inline', 'Could not back up original image %fullurl to %directory.', array('%fullurl' => $fullurl, '%directory' => $directory), WATCHDOG_WARNING);
      $alert .= 'Original image backup couldn\'t be created.' . "\n";
    }
  }
  else { //original image was from external site
    $local = FALSE;
    $alert .= 'Original image was from external website.' . "\n";
    $url_info = parse_url($_POST['fullurl']);
    $directory .= '/' . $url_info['host'] . '/' . dirname($url_info['path']);
    if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
      watchdog('imageeditor_inline', 'Directory %directory for image backups could not be created.', array('%directory' => $directory), WATCHDOG_WARNING);
    }
    elseif ($data = imageeditor_inline_save_file_get_contents($_POST['fullurl'])) {
      if ($backup = file_unmanaged_save_data($data, $directory . '/' . basename($_POST['fullurl']))) {
        watchdog('imageeditor_inline', 'Backed up original image %fullurl to %backup.', array('%fullurl' => $_POST['fullurl'], '%backup' => $backup), WATCHDOG_INFO);
        $alert .= 'Original image was backed up.' . "\n";
      }
      else {
        watchdog('imageeditor_inline', 'Could not back up original image %fullurl to %directory.', array('%fullurl' => $_POST['fullurl'], '%directory' => $directory), WATCHDOG_WARNING);
        $alert .= 'Original image backup couldn\'t be created.' . "\n";
      }
    }
    else {
      watchdog('imageeditor_inline', 'Could not get image from %url.', array('%url' => $_POST['fullurl']), WATCHDOG_WARNING);
      $alert .= 'Original image backup couldn\'t be created.' . "\n";
    }
  }
  
//Replace original image with edited image
  if ($image = imageeditor_inline_urltouri($_POST['image'])) { //edited image is from this site
    $alert .= 'Edited image comes from this website.' . "\n";
    if ($local) { //original image was from local site - rewrite it using the edited image
      if ($file = file_unmanaged_move($image, $fullurl, FILE_EXISTS_REPLACE)) {
        watchdog('imageeditor_inline', 'Saved edited image %image to %file.', array('%image' => $image, '%file' => $file), WATCHDOG_INFO);
        $alert .= 'Original image was successfully replaced by edited image.' . "\n";
      }
      else {
        watchdog('imageeditor_inline', 'Could not save edited image %image to %fullurl.', array('%image' => $image, '%fullurl' => $fullurl), WATCHDOG_WARNING);
        $alert .= 'Original image couldn\'t be replaced by edited image.' . "\n";
      }
    }
    else { //original image was from external site - save edited image to imageeditor/external
      $directory = $ds . '://imageeditor/external';
      if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
        watchdog('imageeditor_inline', 'Directory %directory could not be created.', array('%directory' => $directory), WATCHDOG_WARNING);
      }
      elseif ($file = file_unmanaged_move($image, $directory . '/' . basename($image), FILE_EXISTS_RENAME)) {
        watchdog('imageeditor_inline', 'Saved edited image %image to %file.', array('%image' => $image, '%file' => $file), WATCHDOG_INFO);
        $alert .= 'Edited image was successfully saved.' . "\n";
      }
      else {
        watchdog('imageeditor_inline', 'Could not save edited image %image to %directory.', array('%image' => $image, '%directory' => $directory . '/' . basename($image)), WATCHDOG_WARNING);
        $alert .= 'Edited image couldn\'t be saved.' . "\n";
      }
    }
  }
  else { //edited image is from external site
    $alert .= 'Edited image comes from external website.' . "\n";
    if ($data = imageeditor_inline_save_file_get_contents($_POST['image'])) {
      if ($local) { //original image was from local site - rewrite it using the edited image
        if ($file = file_unmanaged_save_data($data, $fullurl, FILE_EXISTS_REPLACE)) {
          watchdog('imageeditor_inline', 'Saved edited image %image to %file.', array('%image' => $_POST['image'], '%file' => $file), WATCHDOG_INFO);
          $alert .= 'Original image was successfully replaced by edited image.' . "\n";
        }
        else {
          watchdog('imageeditor_inline', 'Could not save edited image %image to %fullurl.', array('%image' => $_POST['image'], '%fullurl' => $fullurl), WATCHDOG_WARNING);
          $alert .= 'Original image couldn\'t be replaced by edited image.' . "\n";
        }
      }
      else { //original image was from external site - save edited image to imageeditor/external
        $directory = $ds . '://imageeditor/external';
        if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
          watchdog('imageeditor_inline', 'Directory %directory could not be created.', array('%directory' => $directory), WATCHDOG_WARNING);
        }
        elseif ($file = file_unmanaged_save_data($data, $directory . '/' . basename($_POST['image']), FILE_EXISTS_RENAME)) {
          watchdog('imageeditor_inline', 'Saved edited image %image to %file.', array('%image' => $_POST['image'], '%file' => $file), WATCHDOG_INFO);
          $alert .= 'Edited image was successfully saved.' . "\n";
        }
        else {
          watchdog('imageeditor_inline', 'Could not save edited image %image to %directory.', array('%image' => $_POST['image'], '%directory' => $directory . '/' . basename($_POST['image'])), WATCHDOG_WARNING);
          $alert .= 'Edited image couldn\'t be saved.' . "\n";
        }
      }
    }
    else {
      watchdog('imageeditor_inline', 'Could not get image from %url.', array('%url' => $_POST['image']), WATCHDOG_WARNING);
    }
  }
  
//Clear styles cache and update files_managed DB table if original image was local one
  if ($local) {
    //Clear styles cache
    image_path_flush($fullurl);
    $alert .= 'Image styles of original image were flushed.' . "\n";
    
    //Check if this uri is registered in DB and update its record
    $existing_files = file_load_multiple(array(), array('uri' => $fullurl));
    global $user;
    foreach ($existing_files as $file) {
      if (variable_get('imageeditor_inline_file_ownership', 0)) {
        $file->uid = $user->uid;
        $alert .= 'Image file ownership has been changed to you.' . "\n";
      }
      file_save($file);
    }
  }
  
  drupal_json_output($alert);
  }
}

function imageeditor_inline_save_file_get_contents($url) {
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
  //Causes a warning if PHP safe mode is on.
  @curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
  $data = curl_exec($ch);
  curl_close($ch);
  
  return $data;
}

function imageeditor_inline_urltouri($url) {
  //allow other modules to recognize url and provide uri
  foreach(module_invoke_all('imageeditor_inline_urltouri', $url) as $value) {
    if ($value) {
      return $value;
    }
  }
}

/**
 * Implements hook_imageeditor_inline_urltouri().
 */
function imageeditor_inline_imageeditor_inline_urltouri($url) {
  global $base_url;
  $ds = file_default_scheme();
  $sw = file_stream_wrapper_get_instance_by_scheme($ds);
  //check that url is from this site and from default stream wrapper
  if (preg_match('`^' . preg_quote($base_url . '/' . $sw->getDirectoryPath() . '/') . '`', $url)) {
    $uri = $ds . '://' . preg_replace('`^' . preg_quote($base_url . '/' . $sw->getDirectoryPath() . '/') . '`', '', $url);
    return $uri;
  }
  else {
    return FALSE;
  }
}

function imageeditor_inline_access_check() {
  global $user;
  $access = array();
  foreach (explode(',', $_POST['images']) as $image) {
    $access[] = _imageeditor_inline_access_check($image);
  }
  drupal_json_output($access);
}

function _imageeditor_inline_access_check($image) {
  global $user;
  if (!variable_get('imageeditor_inline_access_check', 0)) {
    return TRUE;
  }
  else {
    if (user_access('edit all images')) {
      return TRUE;
    }
    elseif (user_access('edit own images')) {
      if ($fullurl = imageeditor_inline_urltouri($image)) {
        $existing_files = file_load_multiple(array(), array('uri' => $fullurl));
        foreach ($existing_files as $file) {
          if ($file->uid == $user->uid) {
            return TRUE;
          }
          else {
            return FALSE;
          }
        }
      }
      else {
        return FALSE;
      }
    }
    else {
      return FALSE;
    }
  }
}

function imageeditor_inline_revert() {
  if ($fullurl = imageeditor_inline_urltouri($_GET['image'])) {
    $ds = file_default_scheme();
    $pathinfo = pathinfo(file_uri_target($fullurl));
    $directory = $ds. '://imageeditor/backup' . '/' . $pathinfo['dirname'];
    $filename = substr($pathinfo['basename'], 0, strlen($pathinfo['basename']) - strlen($pathinfo['extension']) - 1);
    $mask = '/' . $filename . '(_[0-9]+)?\.' . $pathinfo['extension'] . '/';
    $result = array();
    foreach (file_scan_directory($directory, $mask) as $key => $file) {
      $result[] = theme('image_style', array('style_name' => variable_get('imageeditor_inline_revert_image_style', 'thumbnail'), 'path' => $file->uri, 'attributes' => array('class' => 'imageeditor-inline-revert')));
    }
    if (!empty($result)) {
      $output = 'Click on the image thumbnail to revert to it.';
      $output .= '<div class="imageeditor-inline-revert-images">';
      foreach ($result as $image) {
        $output .= $image;
      }
      $output .= '</div>';
      
      $path = drupal_get_path('module', 'imageeditor_inline');
      drupal_add_js($path . '/imageeditor_inline_revert.js');
      drupal_add_js(array('imageeditor_inline' => array('imageeditor_inline_revert' => $_GET['image'])), 'setting');
      drupal_add_css($path . '/imageeditor_inline.css');
      return $output;
    }
    else {
      return 'There are no image backups to revert to.';
    }
  }
  else {  
    return 'This image is from external site.';
  }
}

function imageeditor_inline_revert_theme() {
  return variable_get('admin_theme', 0);
}

/**
 * Configuration form for editing Image Editor Inline settings.
 */
function imageeditor_inline_settings_form() {
  drupal_add_css(drupal_get_path('module', 'imageeditor') . '/imageeditor.css');
  
  $form['editors'] = array(
    '#type' => 'item',
    '#title' => t('Enabled Image Editors'),
    '#description' => t('Choose enabled image editors for inline image editing and their order.'),
  );
  
  $position = 0;
  foreach (imageeditor_info() as $codename => $editor) {
    $position++;
    $form['imageeditor_inline_' . $codename . '_enabled'] = array(
      '#type' => 'checkbox',
      '#title' =>  '<div class="imageeditor-editor ' . $editor['class'] . '"></div>' . $editor['name'] . ' (<a href="' . $editor['site'] . '" target="_blank">' . t('site') . '</a>)',
      '#default_value' => variable_get('imageeditor_inline_' . $codename . '_enabled', 0),
    );
    $form['imageeditor_inline_' . $codename . '_description'] = array(
      '#type' => 'markup',
      '#markup' => $editor['description'],
    );
    $form['imageeditor_inline_' . $codename . '_api_key'] = array(
      '#type' => 'markup',
      '#markup' => $editor['api_key'] ? l(variable_get($editor['api_key_codename']) ? t('Already set'): t('Required'), 'admin/config/media/imageeditor') : t('Not needed'),
    );
    $form['imageeditor_inline_' . $codename . '_position'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('imageeditor_inline_' . $codename . '_position', 0) ? variable_get('imageeditor_inline_' . $codename . '_position', 0) : $position,
      '#size' => 3,
      '#maxlenth' => 4,
      '#attributes' => array('class' => array('imageeditor-position')),
    );
  }
  
  $form['uploaders'] = array(
    '#type' => 'item',
    '#title' => t('Enabled Upload services'),
    '#description' => t('Choose enabled upload services to upload images to if your images are not available from external network.'),
  );
  
  $position = 0;
  foreach (imageeditor_uploaders() as $codename => $uploader) {
    $position++;
    $form['imageeditor_inline_' . $codename . '_enabled'] = array(
      '#type' => 'checkbox',
      '#title' =>  '<div class="imageeditor-uploader ' . $uploader['class'] . '"></div>' . $uploader['name'] . ' (<a href="' . $uploader['site'] . '" target="_blank">' . t('site') . '</a>)',
      '#default_value' => variable_get('imageeditor_inline_' . $codename . '_enabled', 0),
    );
    $form['imageeditor_inline_' . $codename . '_description'] = array(
      '#type' => 'markup',
      '#markup' => $uploader['description'],
    );
    $form['imageeditor_inline_' . $codename . '_api_key'] = array(
      '#type' => 'markup',
      '#markup' => $uploader['api_key'] ? l(variable_get($uploader['api_key_codename']) ? t('Already set'): t('Required'), 'admin/config/media/imageeditor') : t('Not needed'),
    );
    $form['imageeditor_inline_' . $codename . '_position'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('imageeditor_inline_' . $codename . '_position', 0) ? variable_get('imageeditor_inline_' . $codename . '_position', 0) : $position,
      '#size' => 3,
      '#maxlenth' => 4,
      '#attributes' => array('class' => array('imageuploader-position')),
    );
  }
  
  $form['imageeditor_inline_min_dimention'] = array(
    '#type' => 'select',
    '#title' => t('Minimal image dimention'),
    '#description' => t('Minimal image height or width to activate Image Editor Inline.'),
    '#options' => array(10 => 10, 20 => 20, 30 => 30, 50 => 50, 100 => 100, 150 => 150, 200 => 200, 300 => 300, 500 => 500),
    '#default_value' => variable_get('imageeditor_inline_min_dimention', 150),
    '#weight' => 10,
  );
  $form['imageeditor_inline_ignore'] = array(
    '#type' => 'textfield',
    '#title' => t('Ignore/skip images having these CSS classes'),
    '#description' => 'jQuery selector expression to pass to the .not() method.',
    '#default_value' => variable_get('imageeditor_inline_ignore', '.admin-menu-icon, .stack-image, .imageeditor-inline-revert'),
    '#weight' => 15,
  );
  $form['imageeditor_inline_icons_position'] = array(
    '#type' => 'radios',
    '#title' => t('Icons position'),
    '#description' => t('Whether to show editing icons under the image or as a popup when you hover your mouse over the image.'),
    '#options' => array(t('Under the image'), t('Popup on the image when you hover over it')),
    '#default_value' => variable_get('imageeditor_inline_icons_position', 1),
    '#weight' => 20,
  );
  $form['imageeditor_inline_file_ownership'] = array(
    '#type' => 'radios',
    '#title' => t('Image file ownership'),
    '#description' => t('Whether to change edited image ownership to the user editing the image.'),
    '#options' => array(t('Do not change, keep the original image uploader'), t('Change to the user editing/reverting the image')),
    '#default_value' => variable_get('imageeditor_inline_file_ownership', 0),
    '#weight' => 30,
  );
  foreach (image_styles() as $key => $value) {
    $options[$key] = $key;
  }
  $form['imageeditor_inline_revert_image_style'] = array(
    '#type' => 'select',
    '#title' => t('Previews image style'),
    '#description' => t('Choose image style to use for Image Editor Inline Revert previews.'),
    '#options' => $options,
    '#default_value' => variable_get('imageeditor_inline_revert_image_style', 'medium'),
    '#weight' => 40,
  );
  $form['imageeditor_inline_access_check'] = array(
    '#type' => 'radios',
    '#title' => t('Access check feature'),
    '#description' => t('Access check feature allows to restrict image editing access.'),
    '#options' => array(
      t('Disable access check - all users with "@use_imageeditor_inline" permission will be able to edit any image', array('@use_imageeditor_inline' => t('Use Image Editor Inline'))),
      t('Enable access check - checks for image editing access using "@edit_all_images" and "@edit_own_images" permissions', array('@edit_all_images' => t('Edit any image on the page'), '@edit_own_images' => t('Edit only own images')))
    ),
    '#default_value' => variable_get('imageeditor_inline_access_check', 0),
    '#weight' => 50,
  );
  
  $form['#theme'] = 'imageeditor_inline_settings_form';
  return system_settings_form($form);
}

/**
 * Implements hook_theme().
 */
function imageeditor_inline_theme($existing, $type, $theme, $path) {
  return array(
    'imageeditor_inline_settings_form' => array(
      'render element' => 'form',
    ),
  );
}

function theme_imageeditor_inline_settings_form($variables) {
  $form = $variables['form'];
  $output = drupal_render($form['editors']);
  
  $header = array(t('Name'), t('Description'), t('API key'), t('Position'));
  $rows = array();
  $imageeditors = imageeditor_info();
  $imageeditors_sort = array();
  foreach ($imageeditors as $codename => $editor) {
    $imageeditors_sort[$codename] = $form['imageeditor_inline_' . $codename . '_position'];
  }
  asort($imageeditors_sort);
  
  foreach ($imageeditors_sort as $codename => $position) {
    $row = array();
    $row[] = drupal_render($form['imageeditor_inline_' . $codename . '_enabled']);
    $row[] = drupal_render($form['imageeditor_inline_' . $codename . '_description']);
    $row[] = drupal_render($form['imageeditor_inline_' . $codename . '_api_key']);
    $row[] = drupal_render($form['imageeditor_inline_' . $codename . '_position']);
    $rows[] = array('data' => $row, 'class' => array('draggable'));
  }
  drupal_add_tabledrag('imageeditors-table', 'order', 'sibling', 'imageeditor-position');
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'imageeditors-table')));
  
  $output .= drupal_render($form['uploaders']);
  $rows = array();
  $imageuploaders = imageeditor_uploaders();
  $imageuploaders_sort = array();
  foreach ($imageuploaders as $codename => $uploader) {
    $imageuploaders_sort[$codename] = $form['imageeditor_inline_' . $codename . '_position'];
  }
  asort($imageuploaders_sort);
  
  foreach ($imageuploaders_sort as $codename => $position) {
    $row = array();
    $row[] = drupal_render($form['imageeditor_inline_' . $codename . '_enabled']);
    $row[] = drupal_render($form['imageeditor_inline_' . $codename . '_description']);
    $row[] = drupal_render($form['imageeditor_inline_' . $codename . '_api_key']);
    $row[] = drupal_render($form['imageeditor_inline_' . $codename . '_position']);
    $rows[] = array('data' => $row, 'class' => array('draggable'));
  }
  drupal_add_tabledrag('imageuploaders-table', 'order', 'sibling', 'imageuploader-position');
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'imageuploaders-table')));
  
  $output .= drupal_render_children($form);
  
  return $output;
}

function imageeditor_inline_page_alter(&$page) {
  if (!user_access('use imageeditor_inline')) {
    return;
  }
  
  static $conf_added;
  if (empty($conf_added)) {
    $conf_added['imageeditor'] = FALSE;
    $conf_added['imageeditor_inline'] = FALSE;
  }
  
  if (!$conf_added['imageeditor_inline']) {
    $conf_added['imageeditor_inline'] = TRUE;
    $conf_array = array();
    $editors = array();
    foreach(imageeditor_info() as $codename => $editor) {
      if (variable_get('imageeditor_inline_' . $codename . '_enabled', 0)) {
        $editors[$codename] =variable_get('imageeditor_inline_' . $codename . '_position', 0);
      }
    }
    $uploaders = array();
    foreach(imageeditor_uploaders() as $codename => $uploader) {
      if (variable_get('imageeditor_inline_' . $codename . '_enabled', 0)) {
        $uploaders[$codename] = variable_get('imageeditor_inline_' . $codename . '_position', 0);
      }
    }
    
    //imageeditor initialization
    imageeditor_initialize($editors, $uploaders);
    
    $conf_array['editors'] = $editors;
    $conf_array['uploaders'] = $uploaders;
    $conf_array['save_url'] = url('imageeditor_inline/ajax/save', array('absolute' => TRUE));
    $conf_array['access_check'] = variable_get('imageeditor_inline_access_check', 0);
    $conf_array['access_check_url'] = url('imageeditor_inline/ajax/access_check', array('absolute' => TRUE));
    $conf_array['icons_position'] = variable_get('imageeditor_inline_icons_position', 1);
    $conf_array['min_dimention'] = variable_get('imageeditor_inline_min_dimention', 150);
    $conf_array['ignore'] = variable_get('imageeditor_inline_ignore', '.admin-menu-icon, .stack-image, .imageeditor-inline-revert');
    
    drupal_add_js(array('imageeditor_inline' => $conf_array), 'setting');
    $path = drupal_get_path('module', 'imageeditor_inline');
    drupal_add_js($path . '/imageeditor_inline.js', array('scope' => 'footer', 'weight' => 10));
    drupal_add_css($path . '/imageeditor_inline.css');
  }
}

/**
 * Implements hook_imageeditor_info().
 * Adding the revert "editor".
 */
function imageeditor_inline_imageeditor_info() {
  $editors['imageeditor_inline_revert'] = array(
    'name' => t('Image Editor Inline Revert'),
    'description' => t('Image Editor Inline: Revert to the previous image version'),
    'class' => 'imageeditor-inline-revert',
    'site' => url(''),
    'api_key' => FALSE,
    'launch_type' => 'overlay',
    'image_url_param' => 'image',
    'options' => array(
      'launch_url' => url('imageeditor_inline/revert'),
    ),
  );
  return $editors;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
/*function imageeditor_inline_form_imageeditor_settings_form_alter(&$form, &$form_state, $form_id) {
  $form['imageeditor_inline_revert'] = array(
    '#type' => 'fieldset',
    '#title' => t('Special Image Editor Inline Revert options'),
    '#description' => t('Image Editor Inline Revert options'),
  );
  foreach (image_styles() as $key => $value) {
    $options[$key] = $key;
  }
  $form['imageeditor_inline_revert']['imageeditor_inline_revert_image_style'] = array(
    '#type' => 'select',
    '#title' => t('Image style'),
    '#description' => t('Choose image style to use for Image Editor Inline Revert previews.'),
    '#options' => $options,
    '#default_value' => variable_get('imageeditor_inline_revert_image_style', 'medium'),
    '#weight' => 10,
  );
}*/
